<!-- 
    > **Example**

    ```
    roslaunch uuv_gazebo_worlds ocean_waves.launch
    ```

    ```
    roslaunch bluerov2_description upload_bluerov2.launch
    ```

    ```
    roslaunch mppi_ros start_mppi_controller.launch
    ```
-->
<launch>
    <arg name="uuv_name" default="bluerov2" doc="Namespace of the vehicle to be controller"/>
    
    <!-- Name of the vehicle model -->
    <arg name="model_name" default="$(arg uuv_name)"/>
    <!-- Flag to start recoding a rosbag  -->
    <arg name="record" default="false" doc="Record ROS bag"/>
    <arg name="use_ned_frame" default="false" doc="If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up)"/>

    <arg name="lambda" default="0.20" doc="Lambda hyperparam in MPPI"/>
    <arg name="gamma" default="0.1" doc="decoupling factor between cost and noise"/>
    <arg name="upsilon" default="0.5" doc="augmented noise covariance"/>
    <arg name="samples" default="3000" doc="number of samples used for the controller"/>
    <arg name="horizon" default="50" doc="Prediction horizon length"/>
    <arg name="cost" default="$(find mppi_ros)/scripts/mppi_tf/config/tasks/bluerov_static.yaml" doc="Configuration file for the cost function"/>
    <arg name="cost_normalization" default="True" doc="Normalize the cost after the rollouts to tune lambda easier, no theoretical guarentie)"/>
    <arg name="model" default="$(find mppi_ros)/scripts/mppi_tf/config/models/bluerov.yaml" doc="The internal model used by mppi"/>
    <arg name="conf" default="$(find mppi_ros)/scripts/mppi_tf/config/envs/bluerov.default.yaml" doc="Configuration file used for uuv_sim"/>
    <arg name="dt" default="0.1" doc="time interval between two controller actions"/>
    <arg name="state_dim" default="13" doc="the dimensionality of the state vector"/>
    <arg name="action_dim" default="6" doc="the dimensionality of the action vector"/>
    <arg name="log" default="True" doc="True: logs everything in tensorboard."/>
    <arg name="dev" default="True" doc="Enable dev mode. Log_path is augmented with a /dev tag."/>
    <arg name="graph_mode" default="True" doc="Enables tensorflow graph mode computation. Depending on the model, this can considerable speedup the controller."/>
    <arg name="log_path" default="$(find mppi_ros)/log" doc="Path to save the tensorboard log"/>
    <arg name="gpu_idx" default="0" doc="In case of multi-gpu system, choses which one to use"/>

    <node name="mppi" pkg="mppi_ros" type="mppi_node.py" output="screen">
        <remap from="odom" to="$(arg uuv_name)/odometry"/>
        <remap from="thruster_input_twist" to="$(arg uuv_name)/cmd_vel"/>
        <param name="model_name" value="$(arg model_name)"/>
        <param name="lambda" value="$(arg lambda)"/>
        <param name="gamma" value="$(arg gamma)"/>
        <param name="upsilon" value="$(arg upsilon)"/>
        <param name="samples" value="$(arg samples)"/>
        <param name="horizon" value="$(arg horizon)"/>
        <param name="dt" value="$(arg dt)"/>
        <param name="state_dim" value="$(arg state_dim)"/>
        <param name="action_dim" value="$(arg action_dim)"/>
        <rosparam command="load" file="$(arg cost)" ns="cost"/>
        <param name="cost_norm" value="$(arg cost_normalization"/>
        <rosparam command="load" file="$(arg model)" ns="model"/>
        <rosparam command="load" file="$(arg conf)"/>
        <param name="log" value="$(arg log)"/>
        <param name="dev" value="$(arg dev)"/>
        <param name="graph_mode" value="$(arg graph_mode)"/>
        <param name="log_path" value="$(arg log_path)"/>
        <param name="gpu_idx" value="$(arg gpu_idx)"/>
    </node>
</launch>
